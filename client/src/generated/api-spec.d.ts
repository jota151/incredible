/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/blueprint/file": {
    post: {
      parameters: {
        header?: {
          "X-WorkOrder"?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Blueprint"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json;charset=utf-8": [components["schemas"]["UUID"], [number, number]];
          };
        };
        /** @description Invalid `body` or `X-WorkOrder` */
        400: {
          content: never;
        };
      };
    };
  };
  "/folio/{blueprintid}": {
    get: {
      parameters: {
        path: {
          blueprintid: string;
        };
      };
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": components["schemas"]["Folio"];
          };
        };
        /** @description `blueprintid` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/machine/current": {
    get: {
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": components["schemas"]["VersionedMachine (Maybe BlueprintID)"];
          };
        };
      };
    };
  };
  "/machine/current/version": {
    get: {
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": number;
          };
        };
      };
    };
  };
  "/machine/{version}": {
    get: {
      parameters: {
        path: {
          version: number;
        };
      };
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": components["schemas"]["VersionedMachine (Maybe BlueprintID)"];
          };
        };
        /** @description `version` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/machine/delta/{startVersion}/current": {
    get: {
      parameters: {
        path: {
          startVersion: number;
        };
      };
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": [number, components["schemas"]["VersionedMachine ModData"]];
          };
        };
        /** @description `startVersion` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/machine/delta/{startVersion}/{endVersion}": {
    get: {
      parameters: {
        path: {
          startVersion: number;
          endVersion: number;
        };
      };
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": [number, components["schemas"]["VersionedMachine ModData"]];
          };
        };
        /** @description `startVersion` or `endVersion` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/puzzle": {
    get: {
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
            "X-WorkOrder"?: string;
          };
          content: {
            "application/json;charset=utf-8": {
              [key: string]: components["schemas"]["Puzzle"];
            };
          };
        };
      };
    };
  };
  "/moderate/puzzle/{puzzleid}/blueprintid": {
    get: {
      parameters: {
        path: {
          puzzleid: string;
        };
      };
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": components["schemas"]["UUID"][];
          };
        };
        /** @description `puzzleid` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/moderate/puzzle/{puzzleid}/blueprint": {
    get: {
      parameters: {
        path: {
          puzzleid: string;
        };
      };
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": [components["schemas"]["UUID"], components["schemas"]["Blueprint"]][];
          };
        };
        /** @description `puzzleid` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/moderate/puzzle/{puzzleid}": {
    get: {
      parameters: {
        path: {
          puzzleid: string;
        };
      };
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": components["schemas"]["Puzzle"];
          };
        };
        /** @description `puzzleid` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/moderate/puzzle/{puzzleid}/reissue": {
    post: {
      parameters: {
        path: {
          puzzleid: string;
        };
      };
      responses: {
        204: {
          content: never;
        };
        /** @description `puzzleid` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/moderate/build/{X}/{Y}": {
    post: {
      parameters: {
        path: {
          X: number;
          Y: number;
        };
      };
      requestBody?: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["InspectionReport"];
        };
      };
      responses: {
        204: {
          content: never;
        };
        /** @description Invalid `body` */
        400: {
          content: never;
        };
        /** @description `X` or `Y` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/moderate/burn/{blueprintid}": {
    post: {
      parameters: {
        path: {
          blueprintid: string;
        };
      };
      responses: {
        204: {
          content: never;
        };
        /** @description `blueprintid` not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/moderate/machine/current": {
    get: {
      responses: {
        200: {
          headers: {
            "Cache-Control"?: string;
          };
          content: {
            "application/json;charset=utf-8": components["schemas"]["VersionedMachine ModData"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Format: uuid
     * @example 00000000-0000-0000-0000-000000000000
     */
    UUID: string;
    /**
     * @example {
     *   "puzzle": "00000000-0000-0000-0000-000000000000",
     *   "submittedAt": null,
     *   "title": "Lauren Ipsum",
     *   "widgets": {}
     * }
     */
    Blueprint: {
      puzzle: string;
      submittedAt?: components["schemas"]["UTCTime"];
      title: string;
      widgets: components["schemas"]["Object"];
    };
    /**
     * Format: yyyy-mm-ddThh:MM:ssZ
     * @example 2016-07-22T00:00:00Z
     */
    UTCTime: string;
    /** @description Arbitrary JSON object. */
    Object: {
      [key: string]: unknown;
    };
    Folio: {
      blueprint: components["schemas"]["Blueprint"];
      puzzle: components["schemas"]["Puzzle"];
      snapshot: components["schemas"]["Object"];
    };
    /**
     * @example {
     *   "inputs": [
     *     {
     *       "balls": [
     *         {
     *           "rate": 1,
     *           "type": 1
     *         }
     *       ],
     *       "x": 0.5,
     *       "y": 0
     *     }
     *   ],
     *   "outputs": [
     *     {
     *       "balls": [
     *         {
     *           "rate": 1,
     *           "type": 1
     *         }
     *       ],
     *       "x": 0.5,
     *       "y": 1
     *     }
     *   ],
     *   "reqTiles": [
     *     "UpLeft"
     *   ],
     *   "spec": {}
     * }
     */
    Puzzle: {
      inputs: components["schemas"]["Gateway"][];
      outputs: components["schemas"]["Gateway"][];
      reqTiles: components["schemas"]["RelativeCell"][];
      spec: components["schemas"]["Object"];
    };
    /** @enum {string} */
    RelativeCell: "UpLeft" | "Up" | "UpRight" | "Left" | "Right" | "DownLeft" | "Down" | "DownRight";
    /**
     * @example {
     *   "blueprint": "00000000-0000-0000-0000-000000000000",
     *   "puzzle": "00000000-0000-0000-0000-000000000000",
     *   "to_mod": 20
     * }
     */
    Gateway: {
      balls: components["schemas"]["GatewayBall"][];
      /** Format: double */
      x: number;
      /** Format: double */
      y: number;
    };
    GatewayBall: {
      /** Format: double */
      rate: number;
      type: number;
    };
    /**
     * @example {
     *   "grid": [
     *     [
     *       "00000000-0000-0000-0000-000000000000",
     *       "00000000-0000-0000-0000-000000000000"
     *     ],
     *     [
     *       "00000000-0000-0000-0000-000000000000",
     *       null
     *     ]
     *   ],
     *   "ms_per_ball": 0.001,
     *   "prio_puzzles": [],
     *   "tile_size": {
     *     "x": 700,
     *     "y": 700
     *   },
     *   "version": 0
     * }
     */
    "VersionedMachine (Maybe BlueprintID)": {
      grid: components["schemas"]["UUID"][][];
      /** Format: double */
      ms_per_ball: number;
      prio_puzzle?: components["schemas"]["UUID"][];
      tile_size: components["schemas"]["TileSize"];
      version: number;
    };
    TileSize: {
      x: number;
      y: number;
    };
    /**
     * @example {
     *   "grid": [
     *     [
     *       {
     *         "blueprint": "00000000-0000-0000-0000-000000000000",
     *         "puzzle": "00000000-0000-0000-0000-000000000000"
     *       },
     *       {
     *         "puzzle": "00000000-0000-0000-0000-000000000000",
     *         "to_mod": 20
     *       }
     *     ],
     *     [
     *       {
     *         "puzzle": "00000000-0000-0000-0000-000000000000",
     *         "to_mod": 11
     *       },
     *       {
     *         "puzzle": "00000000-0000-0000-0000-000000000000"
     *       }
     *     ]
     *   ],
     *   "ms_per_ball": 0.001,
     *   "prio_puzzles": [],
     *   "tile_size": {
     *     "x": 700,
     *     "y": 700
     *   },
     *   "version": 0
     * }
     */
    "VersionedMachine ModData": {
      grid: components["schemas"]["ModData"][][];
      /** Format: double */
      ms_per_ball: number;
      prio_puzzle?: components["schemas"]["UUID"][];
      tile_size: components["schemas"]["TileSize"];
      version: number;
    };
    InspectionReport: {
      blueprint: components["schemas"]["UUID"];
      snapshot: components["schemas"]["Object"];
    };
    /**
     * @example {
     *   "blueprint": "00000000-0000-0000-0000-000000000000",
     *   "puzzle": "00000000-0000-0000-0000-000000000000",
     *   "to_mod": 20
     * }
     */
    ModData: {
      blueprint?: string;
      puzzle: string;
      to_mod?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
